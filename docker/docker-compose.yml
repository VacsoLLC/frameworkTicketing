version: '3'
services:
  nginx:
    image: nginx:latest
    restart: always
    env_file: ../backend/.env
    volumes:
      - ./config/nginx/templates:/etc/nginx/templates
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./data/frontend/dist:/www
      - ./data/certbot/certs:/certs
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - nodeapp
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
  nodeapp:
    image: node:18
    restart: always
    working_dir: /app
    volumes:
      - ../backend:/app
      - ../frontend:/frontend
      - ./data/frontend/dist:/frontend/dist
      - ./data/backend/node_modules:/app/node_modules
      - ./data/frontend/node_modules:/frontend/node_modules
    command: sh -c "cd /frontend && yarn install && yarn run build && cd /app && yarn install && yarn run indocker"
    env_file: ../backend/.env
    environment:    
      MARIADB_HOST: mariadb
    depends_on:
      - mariadb
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
  ofelia:
    image: mcuadros/ofelia:latest
    restart: always
    depends_on:
      - mariadb
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  
  mariadb:
    image: mariadb:latest
    restart: always
    env_file: ../backend/.env
    environment:
      MARIADB_DATABASE: core
      MARIADB_USER: framework
    ports:
      - '3306:3306'
    volumes:
      - ./data/mariadb:/var/lib/mysql
      - ./backup/mariadb:/backup
      - ./config/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/mariadb/backup.sh:/backup.sh
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.mariadb-backup.schedule: "52 36 7 * * *"
      ofelia.job-exec.mariadb-backup.command: "bash /backup.sh"
  certbot:
    #image: certbot/certbot:latest
    build:
      context: ./dockerfiles/certbot  
      dockerfile: Dockerfile
    env_file: ../backend/.env
    restart: always
    volumes:
      - ./data/certbot/letencrypt:/etc/letsencrypt
      - ./data/certbot/logs:/var/log/letsencrypt
      - ./data/frontend/dist:/var/www/certbot
      - ./data/certbot/certs:/certs
      - ./config/certbot/app:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro  
    entrypoint: ["sh", "-c", "/app/entrypoint.sh"]

    
      
      
        